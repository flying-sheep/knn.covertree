// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// knn_cross
List knn_cross(const NumericMatrix data, const NumericMatrix query, const size_t k, const std::string distance);
RcppExport SEXP _knn_covertree_knn_cross(SEXP dataSEXP, SEXP querySEXP, SEXP kSEXP, SEXP distanceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type query(querySEXP);
    Rcpp::traits::input_parameter< const size_t >::type k(kSEXP);
    Rcpp::traits::input_parameter< const std::string >::type distance(distanceSEXP);
    rcpp_result_gen = Rcpp::wrap(knn_cross(data, query, k, distance));
    return rcpp_result_gen;
END_RCPP
}
// knn_asym
List knn_asym(const NumericMatrix data, const size_t k, const std::string distance);
RcppExport SEXP _knn_covertree_knn_asym(SEXP dataSEXP, SEXP kSEXP, SEXP distanceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const size_t >::type k(kSEXP);
    Rcpp::traits::input_parameter< const std::string >::type distance(distanceSEXP);
    rcpp_result_gen = Rcpp::wrap(knn_asym(data, k, distance));
    return rcpp_result_gen;
END_RCPP
}
// rank_mat
NumericMatrix rank_mat(const NumericMatrix x);
RcppExport SEXP _knn_covertree_rank_mat(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rank_mat(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_knn_covertree_knn_cross", (DL_FUNC) &_knn_covertree_knn_cross, 4},
    {"_knn_covertree_knn_asym", (DL_FUNC) &_knn_covertree_knn_asym, 3},
    {"_knn_covertree_rank_mat", (DL_FUNC) &_knn_covertree_rank_mat, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_knn_covertree(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
